{"type":"cell","id":"40e17b","pos":10,"input":"Not with a tuple","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"224f91","pos":33,"input":"square","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"00b704","pos":12,"input":"We will find out that this is a good thing sometimes. For example, you don't want to change the index of a tensor to something the tensor can't have. More on this as we go.\n\nThere is a small way to cheat if you really want. Like a list, a tuple can contain any simple data type. Including tuples and lists.","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"a3089f","pos":17,"input":"print(tup)\ntup == (1,(2,3),[4,5,6])","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"382d6c","pos":58,"input":"As an aside: $p \\ *= a\\ $ means something special in Python. It is very useful ( along with +=, -=, and /= ).","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"06e022","pos":87,"input":"Hanoi(3,'a','b','c')","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"5d072b","pos":7,"input":"print(lis)\nprint(tup)","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"c30dbc","pos":77,"input":"def fast_exp(a,n):\n    if n == 0:\n        return 1\n    elif n%2==1:\n        return a*fast_exp(a,n-1)\n    else:\n        b = fast_exp(a,n/2)\n        return b*b","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"7ccde4","pos":60,"input":"p = 2\nprint(p)\np *= 3\nprint(p)","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"12df7f","pos":26,"input":"It works:","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"settings","kernel":"python2","backend_state":"running","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.4.3+"}},"kernel_state":"idle"}
{"input":"def simple_exp(a,n):\n    if n == 0:\n        return 1\n    else:\n        p = 1\n        for i in range(n):\n            p *= a # this is the same as saying p = p*a\n        return p","metadata":{"deletable":true,"editable":true},"pos":57,"collapsed":true,"cell_type":"code","type":"cell","id":"9266b6"}
{"type":"cell","id":"7c66b5","pos":45,"input":"What?","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"7bee91","pos":68,"input":"    call recursive_exp(3,8)\n        call recursive_exp(3,7)\n            call recursive_exp(3,6)\n                call recursive_exp(3,5)\n                    call recursive_exp(3,4)\n                        call recursive_exp(3,3)\n                            call recursive_exp(3,2)\n                                call recursive_exp(3,1)\n                                    call recursive_exp(3,0)\n                                        return 1\n                                    return 3\n                                return 9\n                            return 27\n                        retrun 81\n                    return 243\n                return 243\n            return 729\n        return 2187\n    return 6561","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"fa6aa6","pos":88,"input":"Some people might be able to find the solutions of this by hand.","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"06859e","pos":0,"input":"## Lecture 02: Building programs and abstraction in Python","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"0de24f","pos":63,"input":"But there are other ways:","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"78ae8b","pos":46,"input":"L0 = [ [ increment ] ]\nL1 = [ [ increment, increment ], \n       [ increment, square    ] ]\nadd_level(L0,[increment,square]) == L1","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"08096e","pos":15,"input":"tup[2][0]=17\nprint(tup[2])","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"d2826e","pos":31,"input":"increment","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"3694fc","pos":90,"input":"I doubt many people would want to try this. ","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"9afbab","pos":83,"input":"You can learn a lot about this game, and it's rules on wikipedia: <https://en.wikipedia.org/wiki/Tower_of_Hanoi>","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"9dc5b9","pos":5,"input":"A tuple behaves in a very similar way. You use ( ) rather than [ ].","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"870ccc","pos":50,"input":"answer = find_sequence(1,100)","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"8efbfe","pos":1,"input":"Today we will consider different ways to construct a program in Python (or many languages), and the different implications, pros/cons of each kind.\n\nWorking from concrete to abstract, we will consider the following three approaches. \n\n**Procedural** programming\n\n    Step-by-step instructions\n    Structured conditionals (e.g., if/else), and loops (i.e., for)\n\n**Functional** programming\n\n    procedures that mimic mathematical functions\n    outputs follow from inputs with no side effects. Side effects are not always bad!\n\n**Object-oriented** programming\n\n    collections of data *and* functions to operate on that data\n    programs as hierarchies of classes\n    \n\n<br>\n\nWe've already seen examples of all three of these approaches. \n\nProcedural programming is basically the same thing as a \"cook book\"\n\nOur functions, square, and poly are simple examples of functional style. \n\nOur quick intro to complex numbers have elements of object-oriented style.","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"3eb1ca","pos":25,"input":"answer = find_sequence(1,100)","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"input":"def Hanoi(n,A,B,C):\n    if n==1:\n        print(A + ' --> ' + B)\n    else:\n        Hanoi(n-1,A,C,B)\n        Hanoi(1,A,B,C)\n        Hanoi(n-1,C,B,A)","metadata":{"deletable":true,"editable":true},"pos":85,"collapsed":true,"cell_type":"code","type":"cell","id":"0b698a"}
{"type":"cell","id":"9d5fff","pos":84,"input":"The point of this problem is that we don't know how to solve it. But we can solve it is we can get one step away from a problem one unit smaller. That is what this recursive function does.","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"input":"def increment(n):\n    return n+1","metadata":{"deletable":true,"editable":true},"pos":20,"collapsed":true,"cell_type":"code","type":"cell","id":"023894"}
{"input":"def add_level(op_list,function_list):\n    return [x+[y] for y in function_list for x in op_list]","metadata":{"deletable":true,"editable":true},"pos":42,"collapsed":true,"cell_type":"code","type":"cell","id":"fbed36"}
{"type":"cell","id":"0225d9","pos":39,"input":"apply([square,increment],9)","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"c02d89","pos":91,"input":"Hanoi(10,'a','b','c')","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"f76481","pos":8,"input":"You can change the entries in a list in the following way:","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"b29605","pos":21,"input":"increment(3)","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"398c64","pos":48,"input":"You figure out the pattern.\n\nNow we just need to combine these to modules.","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"input":"tup = (1,'two',3.0 + 0.*1j)","metadata":{"deletable":true,"editable":true},"pos":6,"collapsed":true,"cell_type":"code","type":"cell","id":"7a4b7d"}
{"type":"cell","id":"183fd9","pos":80,"input":"        call fast_exp(3,30)\n            call fast_exp(3,15)\n                call fast_exp(3,14)\n                    call fast_exp(3,7)\n                        call fast_exp(3,6)\n                            call fast_exp(3,3)\n                                call fast_exp(3,2)\n                                    call fast_exp(3,1)\n                                        call fast_exp(3,0)\n                                        return 1\n                                    return 3\n                                return 9\n                            return 27\n                        retrun 729\n                    return 2187\n                return 4782969  \n            return 14348907\n        return 205891132094649","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"d026d9","pos":72,"input":"n%a is the remainder for n/a\n\nThe module operator goes hand-in-hand with the floor-divide operator //","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"77788c","pos":81,"input":"This is the same number of recursive call if we had called recursive_exp(3,8) and about 30% the number than \nif we had called recursive_exp(3,30)\n\nFor large n, fast_exp(a,n) requires about log(n) the number of calls as recursive_exp(a,n). This can be a huge savings in general.  \n\nThis is a very simple example of what's known as a ***Divide and Conquer*** algorithm. They show up in a lot of places. Recursive functional programming makes it simple it implement.\n\nThis is the idea that a program is *expressive*.","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"4027e8","pos":49,"input":"def find_sequence(initial,goal):\n    op_list = [[]]\n    for i in range(1,goal-initial+1):\n        op_list = add_level(op_list,[increment,square])\n        for seq in op_list:\n            if apply(seq,initial) == goal:\n                return seq","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"input":"def apply(op_list,arg):\n    if len(op_list) == 0:\n        return arg\n    else:\n        return apply(op_list[1:],op_list[0](arg)) # apply calls it self.","metadata":{"deletable":true,"editable":true},"pos":29,"collapsed":true,"cell_type":"code","type":"cell","id":"39a767"}
{"type":"cell","id":"a2404c","pos":32,"input":"$< \\mathrm{function}\\ \\ \\_\\_\\mathrm{main}\\_\\_.\\mathrm{increment}>$ is Python's way of *binding* something to the name increment.","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"8269b7","pos":65,"input":"This also works:","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"757bbf","pos":54,"input":"Python already has built-in exponentiation; i.e., b**n = $b^{n}$","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"137f65","pos":82,"input":"**3. $\\quad$ Tower of Hanoi **","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"eb73fe","pos":55,"input":"3**4 == 3*3*3*3","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"77fdb4","pos":75,"input":"for i in range(10):\n    print((i==2*(i//2)+i%2,i==3*(i//3)+i%3,i==4*(i//4)+i%4,i==5*(i//5)+i%5))","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"0f6881","pos":59,"input":"p = 2\nprint(p)\np = p * 3\nprint(p)","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"1c3d43","pos":2,"input":"c = 3.1 + 0.4*1j\nprint(c)\nprint(c.real)\nprint(c.imag)","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"60c920","pos":16,"input":"But now look at what we've done:","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"9c30a6","pos":71,"input":"for i in range(10):\n    print((i,i%2,i%3,i%4,i%5))","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"input":"lis = [1,'two',3.0 + 0.*1j]","metadata":{"deletable":true,"editable":true},"pos":4,"collapsed":true,"cell_type":"code","type":"cell","id":"ea3909"}
{"type":"cell","id":"21a387","pos":43,"input":"The for loop syntax in the return statement is called a \"comprehension\". It's useful for cleaning up some complicated expressions. \n\nBut how does this function work?","cell_type":"markdown"}
{"type":"cell","id":"2977ee","pos":69,"input":"print(3**8)\nprint(recursive_exp(3,8))","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"469203","pos":89,"input":"Hanoi(4,'a','b','c')","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"243a01","pos":3,"input":"A complex number is an *object* ( e.g., 3.1 + 0.2j ). It has *methods* ( .real, .imag ) that are functions acting on the data.  \n\nWe will talk about object-oriented approaches next week. Today, we are going to see some difference between procedural and functional style. \n\nBefore we go any further, there is another common Python data type that we didn't cover last time. Ie, a ***tuple***.\n\nWe already know about lists, and that they can contain any kind of data types. E.g.,","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"017e1c","pos":19,"input":"**1: $\\ \\ $  How to get from 1 $\\to $ 100 ? Using only +1, and square operations?**","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"5dd6fe","pos":18,"input":"**PROGRAM EXAMPLES: **","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"308564","pos":11,"input":"tup[0] = 5","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"727213","pos":24,"input":"def find_sequence(initial,goal):\n    candidates = [(str(initial),initial)]\n    for i in range(1,goal-initial+1):\n        new_candidates = []\n        for (action,result) in candidates:\n            for (a,r) in [(' increment',increment),(' square',square)]:\n                new_candidates.append((action+a,r(result)))\n                print(i,': ', new_candidates[-1])\n                if new_candidates[-1][1] == goal:\n                    return new_candidates[-1]\n        candidates = new_candidates","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"61c626","pos":47,"input":"L2 = [ [ increment, increment, increment ], \n       [ increment, square,    increment ],\n       [ increment, increment, square    ],\n       [ increment, square,    square    ] ]\nadd_level(L1,[increment,square]) == L2","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"f0682d","pos":38,"input":"apply([square],9)","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"eb90ac","pos":51,"input":"print(answer)\nanswer == [ increment, increment, square, increment, square ]","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"ac1296","pos":44,"input":"add_level([[increment]],[increment,square])","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"4bff8a","pos":41,"input":"Now we just need to build up the list of functions needed to get us to our goal. \n\nTo do this one step at a time, we need a function that adds complexity ","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"24f6b7","pos":73,"input":"for i in range(10):\n    print((i,i//2,i//3,i//4,i//5))","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"308de9","pos":9,"input":"lis[0] = 5\nprint(lis)","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"21122e","pos":78,"input":"It still works:","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"6efaad","pos":30,"input":"The environment knows what increment and square are now","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"0a4553","pos":27,"input":"((1 + 1 + 1)**2 + 1)**2 == 100","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"342aab","pos":86,"input":"Most people could probably find the solutions of this by hand.","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"9c0327","pos":35,"input":"apply([],9)","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"54e4ee","pos":37,"input":"apply([increment],9)","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"f876e9","pos":13,"input":"tup = (1,(2,3),[4,5,6])\nprint(tup[0])\nprint(tup[1])\nprint(tup[2])","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"input":"def square(n):\n    return n*n","metadata":{"deletable":true,"editable":true},"pos":22,"collapsed":true,"cell_type":"code","type":"cell","id":"452556"}
{"type":"cell","id":"94b55c","pos":61,"input":"This also illustrates a very important concept in programming. The equals sign doesn't the same thing as in mathematics. \n\nIn mathematics, A = B means A and B are the same thing. They are *equal* 24 hours a day, 7 days a week. Always equal. \n\nIn programming, A = B means take the value of B and make A have that same value. It is more something like\n\n$$ A \\ \\leftarrow B$$\n\nAnd this is exactly how some books on programming write it when describing the structure of algorithms. \n\nBack to our regularly scheduled program...\n\nsimple_exp might be good enough. Becuase it works:","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"0bdd39","pos":74,"input":"n//a just divides n by a and throws aways the non-integer part.\n\nFor any positive integers (n,a),\n\n    a*(n//a) + n % a  = n\n\nThese operators are very useful in many situations.","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"c84fdc","pos":34,"input":"We can pass anything in the environment to functions. Including functions!\n\nApplying nothing to a number better give back the number.","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"d3b7cf","pos":23,"input":"square(3)","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"file","last_load":1497831285073}
{"type":"cell","id":"39377c","pos":28,"input":"A Different approach","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"02a4a2","pos":52,"input":"apply(answer,1)","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"9774c8","pos":66,"input":"recursive_exp(3,30) == simple_exp(3,30)","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"d069c1","pos":76,"input":"Now we can check to see if a number is divisible by 2. And use a mathematical property of exponentiation.","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"113e4c","pos":79,"input":"print(fast_exp(3,30)==recursive_exp(3,30))\nprint(fast_exp(3,30)==simple_exp(3,30))","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"input":"def recursive_exp(a,n):\n    if n == 0:\n        return 1\n    else:\n        return a*recursive_exp(a,n-1)","metadata":{"deletable":true,"editable":true},"pos":64,"collapsed":true,"cell_type":"code","type":"cell","id":"7483a8"}
{"type":"cell","id":"8076f0","pos":56,"input":"We are only using this particular operation because it has nice mathematical properties that we can leverage in code.\n\nLet's start with the most straighforward way of doing it:","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"07e81d","pos":67,"input":"What is the function doing?","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"10cc5e","pos":36,"input":"These should behave like you expect:","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"545441","pos":53,"input":"**2. $\\quad$ How to exponentiate? **","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"3c2115","pos":14,"input":"Because tup[2] is a list, we can change it like a list.","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"a9641f","pos":62,"input":"print(simple_exp(3,30)) \nsimple_exp(3,30) == 3**30","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"06f1c3","pos":40,"input":"apply([increment,square],9)","cell_type":"code","metadata":{"deletable":true,"editable":true}}
{"type":"cell","id":"b0bd6e","pos":70,"input":"A really nice feature of recursive programming is that it a lot of mathematical structures are built the same way.\n\n$$Fish + Fish + Fish + Fish + Fish + Fish = 6\\, Fish.$$\n\nversus\n\n$$5Fish + Fish = 6\\, Fish$$\n\nversus\n\n$$ 2 \\times (3\\, Fish) = 6\\, Fish $$\n\nHow does this apply here?\n\nFirst consider Python the module operator %","cell_type":"markdown","metadata":{"deletable":true,"editable":true}}